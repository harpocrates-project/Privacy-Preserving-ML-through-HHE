// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hhe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hhe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hhe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hhe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hhe_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hhe_2eproto;
namespace hheproto {
class CiphertextBytes;
struct CiphertextBytesDefaultTypeInternal;
extern CiphertextBytesDefaultTypeInternal _CiphertextBytes_default_instance_;
class CiphertextMsg;
struct CiphertextMsgDefaultTypeInternal;
extern CiphertextMsgDefaultTypeInternal _CiphertextMsg_default_instance_;
class CiphertextResult;
struct CiphertextResultDefaultTypeInternal;
extern CiphertextResultDefaultTypeInternal _CiphertextResult_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class EncSymmetricDataMsg;
struct EncSymmetricDataMsgDefaultTypeInternal;
extern EncSymmetricDataMsgDefaultTypeInternal _EncSymmetricDataMsg_default_instance_;
class EncSymmetricDataRecord;
struct EncSymmetricDataRecordDefaultTypeInternal;
extern EncSymmetricDataRecordDefaultTypeInternal _EncSymmetricDataRecord_default_instance_;
class EncSymmetricKeysMsg;
struct EncSymmetricKeysMsgDefaultTypeInternal;
extern EncSymmetricKeysMsgDefaultTypeInternal _EncSymmetricKeysMsg_default_instance_;
class MLModelMsg;
struct MLModelMsgDefaultTypeInternal;
extern MLModelMsgDefaultTypeInternal _MLModelMsg_default_instance_;
class PublicKeyMsg;
struct PublicKeyMsgDefaultTypeInternal;
extern PublicKeyMsgDefaultTypeInternal _PublicKeyMsg_default_instance_;
class PublicKeySetMsg;
struct PublicKeySetMsgDefaultTypeInternal;
extern PublicKeySetMsgDefaultTypeInternal _PublicKeySetMsg_default_instance_;
}  // namespace hheproto
PROTOBUF_NAMESPACE_OPEN
template<> ::hheproto::CiphertextBytes* Arena::CreateMaybeMessage<::hheproto::CiphertextBytes>(Arena*);
template<> ::hheproto::CiphertextMsg* Arena::CreateMaybeMessage<::hheproto::CiphertextMsg>(Arena*);
template<> ::hheproto::CiphertextResult* Arena::CreateMaybeMessage<::hheproto::CiphertextResult>(Arena*);
template<> ::hheproto::Empty* Arena::CreateMaybeMessage<::hheproto::Empty>(Arena*);
template<> ::hheproto::EncSymmetricDataMsg* Arena::CreateMaybeMessage<::hheproto::EncSymmetricDataMsg>(Arena*);
template<> ::hheproto::EncSymmetricDataRecord* Arena::CreateMaybeMessage<::hheproto::EncSymmetricDataRecord>(Arena*);
template<> ::hheproto::EncSymmetricKeysMsg* Arena::CreateMaybeMessage<::hheproto::EncSymmetricKeysMsg>(Arena*);
template<> ::hheproto::MLModelMsg* Arena::CreateMaybeMessage<::hheproto::MLModelMsg>(Arena*);
template<> ::hheproto::PublicKeyMsg* Arena::CreateMaybeMessage<::hheproto::PublicKeyMsg>(Arena*);
template<> ::hheproto::PublicKeySetMsg* Arena::CreateMaybeMessage<::hheproto::PublicKeySetMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hheproto {

// ===================================================================

class CiphertextBytes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.CiphertextBytes) */ {
 public:
  inline CiphertextBytes() : CiphertextBytes(nullptr) {}
  ~CiphertextBytes() override;
  explicit PROTOBUF_CONSTEXPR CiphertextBytes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CiphertextBytes(const CiphertextBytes& from);
  CiphertextBytes(CiphertextBytes&& from) noexcept
    : CiphertextBytes() {
    *this = ::std::move(from);
  }

  inline CiphertextBytes& operator=(const CiphertextBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CiphertextBytes& operator=(CiphertextBytes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CiphertextBytes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CiphertextBytes* internal_default_instance() {
    return reinterpret_cast<const CiphertextBytes*>(
               &_CiphertextBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CiphertextBytes& a, CiphertextBytes& b) {
    a.Swap(&b);
  }
  inline void Swap(CiphertextBytes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CiphertextBytes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CiphertextBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CiphertextBytes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CiphertextBytes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CiphertextBytes& from) {
    CiphertextBytes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CiphertextBytes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.CiphertextBytes";
  }
  protected:
  explicit CiphertextBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHHEDecompFieldNumber = 1,
    kAnalystIDFieldNumber = 2,
  };
  // repeated bytes HHEDecomp = 1;
  int hhedecomp_size() const;
  private:
  int _internal_hhedecomp_size() const;
  public:
  void clear_hhedecomp();
  const std::string& hhedecomp(int index) const;
  std::string* mutable_hhedecomp(int index);
  void set_hhedecomp(int index, const std::string& value);
  void set_hhedecomp(int index, std::string&& value);
  void set_hhedecomp(int index, const char* value);
  void set_hhedecomp(int index, const void* value, size_t size);
  std::string* add_hhedecomp();
  void add_hhedecomp(const std::string& value);
  void add_hhedecomp(std::string&& value);
  void add_hhedecomp(const char* value);
  void add_hhedecomp(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hhedecomp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hhedecomp();
  private:
  const std::string& _internal_hhedecomp(int index) const;
  std::string* _internal_add_hhedecomp();
  public:

  // string analystID = 2;
  void clear_analystid();
  const std::string& analystid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_analystid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_analystid();
  PROTOBUF_NODISCARD std::string* release_analystid();
  void set_allocated_analystid(std::string* analystid);
  private:
  const std::string& _internal_analystid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analystid(const std::string& value);
  std::string* _internal_mutable_analystid();
  public:

  // @@protoc_insertion_point(class_scope:hheproto.CiphertextBytes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hhedecomp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analystid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:hheproto.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hheproto.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class PublicKeyMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.PublicKeyMsg) */ {
 public:
  inline PublicKeyMsg() : PublicKeyMsg(nullptr) {}
  ~PublicKeyMsg() override;
  explicit PROTOBUF_CONSTEXPR PublicKeyMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicKeyMsg(const PublicKeyMsg& from);
  PublicKeyMsg(PublicKeyMsg&& from) noexcept
    : PublicKeyMsg() {
    *this = ::std::move(from);
  }

  inline PublicKeyMsg& operator=(const PublicKeyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKeyMsg& operator=(PublicKeyMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicKeyMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicKeyMsg* internal_default_instance() {
    return reinterpret_cast<const PublicKeyMsg*>(
               &_PublicKeyMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PublicKeyMsg& a, PublicKeyMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKeyMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKeyMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicKeyMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicKeyMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicKeyMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicKeyMsg& from) {
    PublicKeyMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKeyMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.PublicKeyMsg";
  }
  protected:
  explicit PublicKeyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hheproto.PublicKeyMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class PublicKeySetMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.PublicKeySetMsg) */ {
 public:
  inline PublicKeySetMsg() : PublicKeySetMsg(nullptr) {}
  ~PublicKeySetMsg() override;
  explicit PROTOBUF_CONSTEXPR PublicKeySetMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicKeySetMsg(const PublicKeySetMsg& from);
  PublicKeySetMsg(PublicKeySetMsg&& from) noexcept
    : PublicKeySetMsg() {
    *this = ::std::move(from);
  }

  inline PublicKeySetMsg& operator=(const PublicKeySetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKeySetMsg& operator=(PublicKeySetMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicKeySetMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicKeySetMsg* internal_default_instance() {
    return reinterpret_cast<const PublicKeySetMsg*>(
               &_PublicKeySetMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PublicKeySetMsg& a, PublicKeySetMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKeySetMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKeySetMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicKeySetMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicKeySetMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicKeySetMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicKeySetMsg& from) {
    PublicKeySetMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKeySetMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.PublicKeySetMsg";
  }
  protected:
  explicit PublicKeySetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnalystUUIDFieldNumber = 6,
    kPkFieldNumber = 1,
    kRkFieldNumber = 2,
    kGkFieldNumber = 3,
    kCspRkFieldNumber = 4,
    kCspGkFieldNumber = 5,
  };
  // string analystUUID = 6;
  void clear_analystuuid();
  const std::string& analystuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_analystuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_analystuuid();
  PROTOBUF_NODISCARD std::string* release_analystuuid();
  void set_allocated_analystuuid(std::string* analystuuid);
  private:
  const std::string& _internal_analystuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analystuuid(const std::string& value);
  std::string* _internal_mutable_analystuuid();
  public:

  // .hheproto.PublicKeyMsg pk = 1;
  bool has_pk() const;
  private:
  bool _internal_has_pk() const;
  public:
  void clear_pk();
  const ::hheproto::PublicKeyMsg& pk() const;
  PROTOBUF_NODISCARD ::hheproto::PublicKeyMsg* release_pk();
  ::hheproto::PublicKeyMsg* mutable_pk();
  void set_allocated_pk(::hheproto::PublicKeyMsg* pk);
  private:
  const ::hheproto::PublicKeyMsg& _internal_pk() const;
  ::hheproto::PublicKeyMsg* _internal_mutable_pk();
  public:
  void unsafe_arena_set_allocated_pk(
      ::hheproto::PublicKeyMsg* pk);
  ::hheproto::PublicKeyMsg* unsafe_arena_release_pk();

  // .hheproto.PublicKeyMsg rk = 2;
  bool has_rk() const;
  private:
  bool _internal_has_rk() const;
  public:
  void clear_rk();
  const ::hheproto::PublicKeyMsg& rk() const;
  PROTOBUF_NODISCARD ::hheproto::PublicKeyMsg* release_rk();
  ::hheproto::PublicKeyMsg* mutable_rk();
  void set_allocated_rk(::hheproto::PublicKeyMsg* rk);
  private:
  const ::hheproto::PublicKeyMsg& _internal_rk() const;
  ::hheproto::PublicKeyMsg* _internal_mutable_rk();
  public:
  void unsafe_arena_set_allocated_rk(
      ::hheproto::PublicKeyMsg* rk);
  ::hheproto::PublicKeyMsg* unsafe_arena_release_rk();

  // .hheproto.PublicKeyMsg gk = 3;
  bool has_gk() const;
  private:
  bool _internal_has_gk() const;
  public:
  void clear_gk();
  const ::hheproto::PublicKeyMsg& gk() const;
  PROTOBUF_NODISCARD ::hheproto::PublicKeyMsg* release_gk();
  ::hheproto::PublicKeyMsg* mutable_gk();
  void set_allocated_gk(::hheproto::PublicKeyMsg* gk);
  private:
  const ::hheproto::PublicKeyMsg& _internal_gk() const;
  ::hheproto::PublicKeyMsg* _internal_mutable_gk();
  public:
  void unsafe_arena_set_allocated_gk(
      ::hheproto::PublicKeyMsg* gk);
  ::hheproto::PublicKeyMsg* unsafe_arena_release_gk();

  // .hheproto.PublicKeyMsg csp_rk = 4;
  bool has_csp_rk() const;
  private:
  bool _internal_has_csp_rk() const;
  public:
  void clear_csp_rk();
  const ::hheproto::PublicKeyMsg& csp_rk() const;
  PROTOBUF_NODISCARD ::hheproto::PublicKeyMsg* release_csp_rk();
  ::hheproto::PublicKeyMsg* mutable_csp_rk();
  void set_allocated_csp_rk(::hheproto::PublicKeyMsg* csp_rk);
  private:
  const ::hheproto::PublicKeyMsg& _internal_csp_rk() const;
  ::hheproto::PublicKeyMsg* _internal_mutable_csp_rk();
  public:
  void unsafe_arena_set_allocated_csp_rk(
      ::hheproto::PublicKeyMsg* csp_rk);
  ::hheproto::PublicKeyMsg* unsafe_arena_release_csp_rk();

  // .hheproto.PublicKeyMsg csp_gk = 5;
  bool has_csp_gk() const;
  private:
  bool _internal_has_csp_gk() const;
  public:
  void clear_csp_gk();
  const ::hheproto::PublicKeyMsg& csp_gk() const;
  PROTOBUF_NODISCARD ::hheproto::PublicKeyMsg* release_csp_gk();
  ::hheproto::PublicKeyMsg* mutable_csp_gk();
  void set_allocated_csp_gk(::hheproto::PublicKeyMsg* csp_gk);
  private:
  const ::hheproto::PublicKeyMsg& _internal_csp_gk() const;
  ::hheproto::PublicKeyMsg* _internal_mutable_csp_gk();
  public:
  void unsafe_arena_set_allocated_csp_gk(
      ::hheproto::PublicKeyMsg* csp_gk);
  ::hheproto::PublicKeyMsg* unsafe_arena_release_csp_gk();

  // @@protoc_insertion_point(class_scope:hheproto.PublicKeySetMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analystuuid_;
    ::hheproto::PublicKeyMsg* pk_;
    ::hheproto::PublicKeyMsg* rk_;
    ::hheproto::PublicKeyMsg* gk_;
    ::hheproto::PublicKeyMsg* csp_rk_;
    ::hheproto::PublicKeyMsg* csp_gk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class CiphertextResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.CiphertextResult) */ {
 public:
  inline CiphertextResult() : CiphertextResult(nullptr) {}
  ~CiphertextResult() override;
  explicit PROTOBUF_CONSTEXPR CiphertextResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CiphertextResult(const CiphertextResult& from);
  CiphertextResult(CiphertextResult&& from) noexcept
    : CiphertextResult() {
    *this = ::std::move(from);
  }

  inline CiphertextResult& operator=(const CiphertextResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CiphertextResult& operator=(CiphertextResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CiphertextResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CiphertextResult* internal_default_instance() {
    return reinterpret_cast<const CiphertextResult*>(
               &_CiphertextResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CiphertextResult& a, CiphertextResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CiphertextResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CiphertextResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CiphertextResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CiphertextResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CiphertextResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CiphertextResult& from) {
    CiphertextResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CiphertextResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.CiphertextResult";
  }
  protected:
  explicit CiphertextResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // repeated .hheproto.CiphertextMsg result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::hheproto::CiphertextMsg* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >*
      mutable_result();
  private:
  const ::hheproto::CiphertextMsg& _internal_result(int index) const;
  ::hheproto::CiphertextMsg* _internal_add_result();
  public:
  const ::hheproto::CiphertextMsg& result(int index) const;
  ::hheproto::CiphertextMsg* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >&
      result() const;

  // @@protoc_insertion_point(class_scope:hheproto.CiphertextResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg > result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class CiphertextMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.CiphertextMsg) */ {
 public:
  inline CiphertextMsg() : CiphertextMsg(nullptr) {}
  ~CiphertextMsg() override;
  explicit PROTOBUF_CONSTEXPR CiphertextMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CiphertextMsg(const CiphertextMsg& from);
  CiphertextMsg(CiphertextMsg&& from) noexcept
    : CiphertextMsg() {
    *this = ::std::move(from);
  }

  inline CiphertextMsg& operator=(const CiphertextMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CiphertextMsg& operator=(CiphertextMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CiphertextMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CiphertextMsg* internal_default_instance() {
    return reinterpret_cast<const CiphertextMsg*>(
               &_CiphertextMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CiphertextMsg& a, CiphertextMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CiphertextMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CiphertextMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CiphertextMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CiphertextMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CiphertextMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CiphertextMsg& from) {
    CiphertextMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CiphertextMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.CiphertextMsg";
  }
  protected:
  explicit CiphertextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hheproto.CiphertextMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class MLModelMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.MLModelMsg) */ {
 public:
  inline MLModelMsg() : MLModelMsg(nullptr) {}
  ~MLModelMsg() override;
  explicit PROTOBUF_CONSTEXPR MLModelMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MLModelMsg(const MLModelMsg& from);
  MLModelMsg(MLModelMsg&& from) noexcept
    : MLModelMsg() {
    *this = ::std::move(from);
  }

  inline MLModelMsg& operator=(const MLModelMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MLModelMsg& operator=(MLModelMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MLModelMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const MLModelMsg* internal_default_instance() {
    return reinterpret_cast<const MLModelMsg*>(
               &_MLModelMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MLModelMsg& a, MLModelMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MLModelMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MLModelMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MLModelMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MLModelMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MLModelMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MLModelMsg& from) {
    MLModelMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MLModelMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.MLModelMsg";
  }
  protected:
  explicit MLModelMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
  };
  // repeated .hheproto.CiphertextMsg weights = 1;
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  ::hheproto::CiphertextMsg* mutable_weights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >*
      mutable_weights();
  private:
  const ::hheproto::CiphertextMsg& _internal_weights(int index) const;
  ::hheproto::CiphertextMsg* _internal_add_weights();
  public:
  const ::hheproto::CiphertextMsg& weights(int index) const;
  ::hheproto::CiphertextMsg* add_weights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >&
      weights() const;

  // @@protoc_insertion_point(class_scope:hheproto.MLModelMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg > weights_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class EncSymmetricKeysMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.EncSymmetricKeysMsg) */ {
 public:
  inline EncSymmetricKeysMsg() : EncSymmetricKeysMsg(nullptr) {}
  ~EncSymmetricKeysMsg() override;
  explicit PROTOBUF_CONSTEXPR EncSymmetricKeysMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncSymmetricKeysMsg(const EncSymmetricKeysMsg& from);
  EncSymmetricKeysMsg(EncSymmetricKeysMsg&& from) noexcept
    : EncSymmetricKeysMsg() {
    *this = ::std::move(from);
  }

  inline EncSymmetricKeysMsg& operator=(const EncSymmetricKeysMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncSymmetricKeysMsg& operator=(EncSymmetricKeysMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncSymmetricKeysMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncSymmetricKeysMsg* internal_default_instance() {
    return reinterpret_cast<const EncSymmetricKeysMsg*>(
               &_EncSymmetricKeysMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EncSymmetricKeysMsg& a, EncSymmetricKeysMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(EncSymmetricKeysMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncSymmetricKeysMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncSymmetricKeysMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncSymmetricKeysMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncSymmetricKeysMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncSymmetricKeysMsg& from) {
    EncSymmetricKeysMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncSymmetricKeysMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.EncSymmetricKeysMsg";
  }
  protected:
  explicit EncSymmetricKeysMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // repeated .hheproto.CiphertextMsg key = 1;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  ::hheproto::CiphertextMsg* mutable_key(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >*
      mutable_key();
  private:
  const ::hheproto::CiphertextMsg& _internal_key(int index) const;
  ::hheproto::CiphertextMsg* _internal_add_key();
  public:
  const ::hheproto::CiphertextMsg& key(int index) const;
  ::hheproto::CiphertextMsg* add_key();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >&
      key() const;

  // @@protoc_insertion_point(class_scope:hheproto.EncSymmetricKeysMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg > key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class EncSymmetricDataMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.EncSymmetricDataMsg) */ {
 public:
  inline EncSymmetricDataMsg() : EncSymmetricDataMsg(nullptr) {}
  ~EncSymmetricDataMsg() override;
  explicit PROTOBUF_CONSTEXPR EncSymmetricDataMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncSymmetricDataMsg(const EncSymmetricDataMsg& from);
  EncSymmetricDataMsg(EncSymmetricDataMsg&& from) noexcept
    : EncSymmetricDataMsg() {
    *this = ::std::move(from);
  }

  inline EncSymmetricDataMsg& operator=(const EncSymmetricDataMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncSymmetricDataMsg& operator=(EncSymmetricDataMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncSymmetricDataMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncSymmetricDataMsg* internal_default_instance() {
    return reinterpret_cast<const EncSymmetricDataMsg*>(
               &_EncSymmetricDataMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EncSymmetricDataMsg& a, EncSymmetricDataMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(EncSymmetricDataMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncSymmetricDataMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncSymmetricDataMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncSymmetricDataMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncSymmetricDataMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncSymmetricDataMsg& from) {
    EncSymmetricDataMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncSymmetricDataMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.EncSymmetricDataMsg";
  }
  protected:
  explicit EncSymmetricDataMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 1,
    kPatientIDFieldNumber = 2,
  };
  // repeated .hheproto.EncSymmetricDataRecord record = 1;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::hheproto::EncSymmetricDataRecord* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::EncSymmetricDataRecord >*
      mutable_record();
  private:
  const ::hheproto::EncSymmetricDataRecord& _internal_record(int index) const;
  ::hheproto::EncSymmetricDataRecord* _internal_add_record();
  public:
  const ::hheproto::EncSymmetricDataRecord& record(int index) const;
  ::hheproto::EncSymmetricDataRecord* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::EncSymmetricDataRecord >&
      record() const;

  // string patientID = 2;
  void clear_patientid();
  const std::string& patientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patientid();
  PROTOBUF_NODISCARD std::string* release_patientid();
  void set_allocated_patientid(std::string* patientid);
  private:
  const std::string& _internal_patientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patientid(const std::string& value);
  std::string* _internal_mutable_patientid();
  public:

  // @@protoc_insertion_point(class_scope:hheproto.EncSymmetricDataMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::EncSymmetricDataRecord > record_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patientid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// -------------------------------------------------------------------

class EncSymmetricDataRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hheproto.EncSymmetricDataRecord) */ {
 public:
  inline EncSymmetricDataRecord() : EncSymmetricDataRecord(nullptr) {}
  ~EncSymmetricDataRecord() override;
  explicit PROTOBUF_CONSTEXPR EncSymmetricDataRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncSymmetricDataRecord(const EncSymmetricDataRecord& from);
  EncSymmetricDataRecord(EncSymmetricDataRecord&& from) noexcept
    : EncSymmetricDataRecord() {
    *this = ::std::move(from);
  }

  inline EncSymmetricDataRecord& operator=(const EncSymmetricDataRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncSymmetricDataRecord& operator=(EncSymmetricDataRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncSymmetricDataRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncSymmetricDataRecord* internal_default_instance() {
    return reinterpret_cast<const EncSymmetricDataRecord*>(
               &_EncSymmetricDataRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EncSymmetricDataRecord& a, EncSymmetricDataRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EncSymmetricDataRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncSymmetricDataRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncSymmetricDataRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncSymmetricDataRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncSymmetricDataRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncSymmetricDataRecord& from) {
    EncSymmetricDataRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncSymmetricDataRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hheproto.EncSymmetricDataRecord";
  }
  protected:
  explicit EncSymmetricDataRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated uint64 value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  uint64_t _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_value() const;
  void _internal_add_value(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_value();
  public:
  uint64_t value(int index) const;
  void set_value(int index, uint64_t value);
  void add_value(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:hheproto.EncSymmetricDataRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > value_;
    mutable std::atomic<int> _value_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hhe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CiphertextBytes

// repeated bytes HHEDecomp = 1;
inline int CiphertextBytes::_internal_hhedecomp_size() const {
  return _impl_.hhedecomp_.size();
}
inline int CiphertextBytes::hhedecomp_size() const {
  return _internal_hhedecomp_size();
}
inline void CiphertextBytes::clear_hhedecomp() {
  _impl_.hhedecomp_.Clear();
}
inline std::string* CiphertextBytes::add_hhedecomp() {
  std::string* _s = _internal_add_hhedecomp();
  // @@protoc_insertion_point(field_add_mutable:hheproto.CiphertextBytes.HHEDecomp)
  return _s;
}
inline const std::string& CiphertextBytes::_internal_hhedecomp(int index) const {
  return _impl_.hhedecomp_.Get(index);
}
inline const std::string& CiphertextBytes::hhedecomp(int index) const {
  // @@protoc_insertion_point(field_get:hheproto.CiphertextBytes.HHEDecomp)
  return _internal_hhedecomp(index);
}
inline std::string* CiphertextBytes::mutable_hhedecomp(int index) {
  // @@protoc_insertion_point(field_mutable:hheproto.CiphertextBytes.HHEDecomp)
  return _impl_.hhedecomp_.Mutable(index);
}
inline void CiphertextBytes::set_hhedecomp(int index, const std::string& value) {
  _impl_.hhedecomp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:hheproto.CiphertextBytes.HHEDecomp)
}
inline void CiphertextBytes::set_hhedecomp(int index, std::string&& value) {
  _impl_.hhedecomp_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:hheproto.CiphertextBytes.HHEDecomp)
}
inline void CiphertextBytes::set_hhedecomp(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.hhedecomp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hheproto.CiphertextBytes.HHEDecomp)
}
inline void CiphertextBytes::set_hhedecomp(int index, const void* value, size_t size) {
  _impl_.hhedecomp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hheproto.CiphertextBytes.HHEDecomp)
}
inline std::string* CiphertextBytes::_internal_add_hhedecomp() {
  return _impl_.hhedecomp_.Add();
}
inline void CiphertextBytes::add_hhedecomp(const std::string& value) {
  _impl_.hhedecomp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hheproto.CiphertextBytes.HHEDecomp)
}
inline void CiphertextBytes::add_hhedecomp(std::string&& value) {
  _impl_.hhedecomp_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hheproto.CiphertextBytes.HHEDecomp)
}
inline void CiphertextBytes::add_hhedecomp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.hhedecomp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hheproto.CiphertextBytes.HHEDecomp)
}
inline void CiphertextBytes::add_hhedecomp(const void* value, size_t size) {
  _impl_.hhedecomp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hheproto.CiphertextBytes.HHEDecomp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CiphertextBytes::hhedecomp() const {
  // @@protoc_insertion_point(field_list:hheproto.CiphertextBytes.HHEDecomp)
  return _impl_.hhedecomp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CiphertextBytes::mutable_hhedecomp() {
  // @@protoc_insertion_point(field_mutable_list:hheproto.CiphertextBytes.HHEDecomp)
  return &_impl_.hhedecomp_;
}

// string analystID = 2;
inline void CiphertextBytes::clear_analystid() {
  _impl_.analystid_.ClearToEmpty();
}
inline const std::string& CiphertextBytes::analystid() const {
  // @@protoc_insertion_point(field_get:hheproto.CiphertextBytes.analystID)
  return _internal_analystid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CiphertextBytes::set_analystid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.analystid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hheproto.CiphertextBytes.analystID)
}
inline std::string* CiphertextBytes::mutable_analystid() {
  std::string* _s = _internal_mutable_analystid();
  // @@protoc_insertion_point(field_mutable:hheproto.CiphertextBytes.analystID)
  return _s;
}
inline const std::string& CiphertextBytes::_internal_analystid() const {
  return _impl_.analystid_.Get();
}
inline void CiphertextBytes::_internal_set_analystid(const std::string& value) {
  
  _impl_.analystid_.Set(value, GetArenaForAllocation());
}
inline std::string* CiphertextBytes::_internal_mutable_analystid() {
  
  return _impl_.analystid_.Mutable(GetArenaForAllocation());
}
inline std::string* CiphertextBytes::release_analystid() {
  // @@protoc_insertion_point(field_release:hheproto.CiphertextBytes.analystID)
  return _impl_.analystid_.Release();
}
inline void CiphertextBytes::set_allocated_analystid(std::string* analystid) {
  if (analystid != nullptr) {
    
  } else {
    
  }
  _impl_.analystid_.SetAllocated(analystid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.analystid_.IsDefault()) {
    _impl_.analystid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hheproto.CiphertextBytes.analystID)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// PublicKeyMsg

// bytes data = 1;
inline void PublicKeyMsg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PublicKeyMsg::data() const {
  // @@protoc_insertion_point(field_get:hheproto.PublicKeyMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicKeyMsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hheproto.PublicKeyMsg.data)
}
inline std::string* PublicKeyMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hheproto.PublicKeyMsg.data)
  return _s;
}
inline const std::string& PublicKeyMsg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PublicKeyMsg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicKeyMsg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicKeyMsg::release_data() {
  // @@protoc_insertion_point(field_release:hheproto.PublicKeyMsg.data)
  return _impl_.data_.Release();
}
inline void PublicKeyMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hheproto.PublicKeyMsg.data)
}

// int32 length = 2;
inline void PublicKeyMsg::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t PublicKeyMsg::_internal_length() const {
  return _impl_.length_;
}
inline int32_t PublicKeyMsg::length() const {
  // @@protoc_insertion_point(field_get:hheproto.PublicKeyMsg.length)
  return _internal_length();
}
inline void PublicKeyMsg::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void PublicKeyMsg::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:hheproto.PublicKeyMsg.length)
}

// -------------------------------------------------------------------

// PublicKeySetMsg

// .hheproto.PublicKeyMsg pk = 1;
inline bool PublicKeySetMsg::_internal_has_pk() const {
  return this != internal_default_instance() && _impl_.pk_ != nullptr;
}
inline bool PublicKeySetMsg::has_pk() const {
  return _internal_has_pk();
}
inline void PublicKeySetMsg::clear_pk() {
  if (GetArenaForAllocation() == nullptr && _impl_.pk_ != nullptr) {
    delete _impl_.pk_;
  }
  _impl_.pk_ = nullptr;
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::_internal_pk() const {
  const ::hheproto::PublicKeyMsg* p = _impl_.pk_;
  return p != nullptr ? *p : reinterpret_cast<const ::hheproto::PublicKeyMsg&>(
      ::hheproto::_PublicKeyMsg_default_instance_);
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::pk() const {
  // @@protoc_insertion_point(field_get:hheproto.PublicKeySetMsg.pk)
  return _internal_pk();
}
inline void PublicKeySetMsg::unsafe_arena_set_allocated_pk(
    ::hheproto::PublicKeyMsg* pk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pk_);
  }
  _impl_.pk_ = pk;
  if (pk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hheproto.PublicKeySetMsg.pk)
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::release_pk() {
  
  ::hheproto::PublicKeyMsg* temp = _impl_.pk_;
  _impl_.pk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::unsafe_arena_release_pk() {
  // @@protoc_insertion_point(field_release:hheproto.PublicKeySetMsg.pk)
  
  ::hheproto::PublicKeyMsg* temp = _impl_.pk_;
  _impl_.pk_ = nullptr;
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::_internal_mutable_pk() {
  
  if (_impl_.pk_ == nullptr) {
    auto* p = CreateMaybeMessage<::hheproto::PublicKeyMsg>(GetArenaForAllocation());
    _impl_.pk_ = p;
  }
  return _impl_.pk_;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::mutable_pk() {
  ::hheproto::PublicKeyMsg* _msg = _internal_mutable_pk();
  // @@protoc_insertion_point(field_mutable:hheproto.PublicKeySetMsg.pk)
  return _msg;
}
inline void PublicKeySetMsg::set_allocated_pk(::hheproto::PublicKeyMsg* pk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pk_;
  }
  if (pk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pk);
    if (message_arena != submessage_arena) {
      pk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pk_ = pk;
  // @@protoc_insertion_point(field_set_allocated:hheproto.PublicKeySetMsg.pk)
}

// .hheproto.PublicKeyMsg rk = 2;
inline bool PublicKeySetMsg::_internal_has_rk() const {
  return this != internal_default_instance() && _impl_.rk_ != nullptr;
}
inline bool PublicKeySetMsg::has_rk() const {
  return _internal_has_rk();
}
inline void PublicKeySetMsg::clear_rk() {
  if (GetArenaForAllocation() == nullptr && _impl_.rk_ != nullptr) {
    delete _impl_.rk_;
  }
  _impl_.rk_ = nullptr;
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::_internal_rk() const {
  const ::hheproto::PublicKeyMsg* p = _impl_.rk_;
  return p != nullptr ? *p : reinterpret_cast<const ::hheproto::PublicKeyMsg&>(
      ::hheproto::_PublicKeyMsg_default_instance_);
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::rk() const {
  // @@protoc_insertion_point(field_get:hheproto.PublicKeySetMsg.rk)
  return _internal_rk();
}
inline void PublicKeySetMsg::unsafe_arena_set_allocated_rk(
    ::hheproto::PublicKeyMsg* rk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rk_);
  }
  _impl_.rk_ = rk;
  if (rk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hheproto.PublicKeySetMsg.rk)
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::release_rk() {
  
  ::hheproto::PublicKeyMsg* temp = _impl_.rk_;
  _impl_.rk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::unsafe_arena_release_rk() {
  // @@protoc_insertion_point(field_release:hheproto.PublicKeySetMsg.rk)
  
  ::hheproto::PublicKeyMsg* temp = _impl_.rk_;
  _impl_.rk_ = nullptr;
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::_internal_mutable_rk() {
  
  if (_impl_.rk_ == nullptr) {
    auto* p = CreateMaybeMessage<::hheproto::PublicKeyMsg>(GetArenaForAllocation());
    _impl_.rk_ = p;
  }
  return _impl_.rk_;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::mutable_rk() {
  ::hheproto::PublicKeyMsg* _msg = _internal_mutable_rk();
  // @@protoc_insertion_point(field_mutable:hheproto.PublicKeySetMsg.rk)
  return _msg;
}
inline void PublicKeySetMsg::set_allocated_rk(::hheproto::PublicKeyMsg* rk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rk_;
  }
  if (rk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rk);
    if (message_arena != submessage_arena) {
      rk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rk_ = rk;
  // @@protoc_insertion_point(field_set_allocated:hheproto.PublicKeySetMsg.rk)
}

// .hheproto.PublicKeyMsg gk = 3;
inline bool PublicKeySetMsg::_internal_has_gk() const {
  return this != internal_default_instance() && _impl_.gk_ != nullptr;
}
inline bool PublicKeySetMsg::has_gk() const {
  return _internal_has_gk();
}
inline void PublicKeySetMsg::clear_gk() {
  if (GetArenaForAllocation() == nullptr && _impl_.gk_ != nullptr) {
    delete _impl_.gk_;
  }
  _impl_.gk_ = nullptr;
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::_internal_gk() const {
  const ::hheproto::PublicKeyMsg* p = _impl_.gk_;
  return p != nullptr ? *p : reinterpret_cast<const ::hheproto::PublicKeyMsg&>(
      ::hheproto::_PublicKeyMsg_default_instance_);
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::gk() const {
  // @@protoc_insertion_point(field_get:hheproto.PublicKeySetMsg.gk)
  return _internal_gk();
}
inline void PublicKeySetMsg::unsafe_arena_set_allocated_gk(
    ::hheproto::PublicKeyMsg* gk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gk_);
  }
  _impl_.gk_ = gk;
  if (gk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hheproto.PublicKeySetMsg.gk)
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::release_gk() {
  
  ::hheproto::PublicKeyMsg* temp = _impl_.gk_;
  _impl_.gk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::unsafe_arena_release_gk() {
  // @@protoc_insertion_point(field_release:hheproto.PublicKeySetMsg.gk)
  
  ::hheproto::PublicKeyMsg* temp = _impl_.gk_;
  _impl_.gk_ = nullptr;
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::_internal_mutable_gk() {
  
  if (_impl_.gk_ == nullptr) {
    auto* p = CreateMaybeMessage<::hheproto::PublicKeyMsg>(GetArenaForAllocation());
    _impl_.gk_ = p;
  }
  return _impl_.gk_;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::mutable_gk() {
  ::hheproto::PublicKeyMsg* _msg = _internal_mutable_gk();
  // @@protoc_insertion_point(field_mutable:hheproto.PublicKeySetMsg.gk)
  return _msg;
}
inline void PublicKeySetMsg::set_allocated_gk(::hheproto::PublicKeyMsg* gk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gk_;
  }
  if (gk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gk);
    if (message_arena != submessage_arena) {
      gk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gk_ = gk;
  // @@protoc_insertion_point(field_set_allocated:hheproto.PublicKeySetMsg.gk)
}

// .hheproto.PublicKeyMsg csp_rk = 4;
inline bool PublicKeySetMsg::_internal_has_csp_rk() const {
  return this != internal_default_instance() && _impl_.csp_rk_ != nullptr;
}
inline bool PublicKeySetMsg::has_csp_rk() const {
  return _internal_has_csp_rk();
}
inline void PublicKeySetMsg::clear_csp_rk() {
  if (GetArenaForAllocation() == nullptr && _impl_.csp_rk_ != nullptr) {
    delete _impl_.csp_rk_;
  }
  _impl_.csp_rk_ = nullptr;
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::_internal_csp_rk() const {
  const ::hheproto::PublicKeyMsg* p = _impl_.csp_rk_;
  return p != nullptr ? *p : reinterpret_cast<const ::hheproto::PublicKeyMsg&>(
      ::hheproto::_PublicKeyMsg_default_instance_);
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::csp_rk() const {
  // @@protoc_insertion_point(field_get:hheproto.PublicKeySetMsg.csp_rk)
  return _internal_csp_rk();
}
inline void PublicKeySetMsg::unsafe_arena_set_allocated_csp_rk(
    ::hheproto::PublicKeyMsg* csp_rk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.csp_rk_);
  }
  _impl_.csp_rk_ = csp_rk;
  if (csp_rk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hheproto.PublicKeySetMsg.csp_rk)
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::release_csp_rk() {
  
  ::hheproto::PublicKeyMsg* temp = _impl_.csp_rk_;
  _impl_.csp_rk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::unsafe_arena_release_csp_rk() {
  // @@protoc_insertion_point(field_release:hheproto.PublicKeySetMsg.csp_rk)
  
  ::hheproto::PublicKeyMsg* temp = _impl_.csp_rk_;
  _impl_.csp_rk_ = nullptr;
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::_internal_mutable_csp_rk() {
  
  if (_impl_.csp_rk_ == nullptr) {
    auto* p = CreateMaybeMessage<::hheproto::PublicKeyMsg>(GetArenaForAllocation());
    _impl_.csp_rk_ = p;
  }
  return _impl_.csp_rk_;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::mutable_csp_rk() {
  ::hheproto::PublicKeyMsg* _msg = _internal_mutable_csp_rk();
  // @@protoc_insertion_point(field_mutable:hheproto.PublicKeySetMsg.csp_rk)
  return _msg;
}
inline void PublicKeySetMsg::set_allocated_csp_rk(::hheproto::PublicKeyMsg* csp_rk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.csp_rk_;
  }
  if (csp_rk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(csp_rk);
    if (message_arena != submessage_arena) {
      csp_rk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csp_rk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.csp_rk_ = csp_rk;
  // @@protoc_insertion_point(field_set_allocated:hheproto.PublicKeySetMsg.csp_rk)
}

// .hheproto.PublicKeyMsg csp_gk = 5;
inline bool PublicKeySetMsg::_internal_has_csp_gk() const {
  return this != internal_default_instance() && _impl_.csp_gk_ != nullptr;
}
inline bool PublicKeySetMsg::has_csp_gk() const {
  return _internal_has_csp_gk();
}
inline void PublicKeySetMsg::clear_csp_gk() {
  if (GetArenaForAllocation() == nullptr && _impl_.csp_gk_ != nullptr) {
    delete _impl_.csp_gk_;
  }
  _impl_.csp_gk_ = nullptr;
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::_internal_csp_gk() const {
  const ::hheproto::PublicKeyMsg* p = _impl_.csp_gk_;
  return p != nullptr ? *p : reinterpret_cast<const ::hheproto::PublicKeyMsg&>(
      ::hheproto::_PublicKeyMsg_default_instance_);
}
inline const ::hheproto::PublicKeyMsg& PublicKeySetMsg::csp_gk() const {
  // @@protoc_insertion_point(field_get:hheproto.PublicKeySetMsg.csp_gk)
  return _internal_csp_gk();
}
inline void PublicKeySetMsg::unsafe_arena_set_allocated_csp_gk(
    ::hheproto::PublicKeyMsg* csp_gk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.csp_gk_);
  }
  _impl_.csp_gk_ = csp_gk;
  if (csp_gk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hheproto.PublicKeySetMsg.csp_gk)
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::release_csp_gk() {
  
  ::hheproto::PublicKeyMsg* temp = _impl_.csp_gk_;
  _impl_.csp_gk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::unsafe_arena_release_csp_gk() {
  // @@protoc_insertion_point(field_release:hheproto.PublicKeySetMsg.csp_gk)
  
  ::hheproto::PublicKeyMsg* temp = _impl_.csp_gk_;
  _impl_.csp_gk_ = nullptr;
  return temp;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::_internal_mutable_csp_gk() {
  
  if (_impl_.csp_gk_ == nullptr) {
    auto* p = CreateMaybeMessage<::hheproto::PublicKeyMsg>(GetArenaForAllocation());
    _impl_.csp_gk_ = p;
  }
  return _impl_.csp_gk_;
}
inline ::hheproto::PublicKeyMsg* PublicKeySetMsg::mutable_csp_gk() {
  ::hheproto::PublicKeyMsg* _msg = _internal_mutable_csp_gk();
  // @@protoc_insertion_point(field_mutable:hheproto.PublicKeySetMsg.csp_gk)
  return _msg;
}
inline void PublicKeySetMsg::set_allocated_csp_gk(::hheproto::PublicKeyMsg* csp_gk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.csp_gk_;
  }
  if (csp_gk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(csp_gk);
    if (message_arena != submessage_arena) {
      csp_gk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csp_gk, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.csp_gk_ = csp_gk;
  // @@protoc_insertion_point(field_set_allocated:hheproto.PublicKeySetMsg.csp_gk)
}

// string analystUUID = 6;
inline void PublicKeySetMsg::clear_analystuuid() {
  _impl_.analystuuid_.ClearToEmpty();
}
inline const std::string& PublicKeySetMsg::analystuuid() const {
  // @@protoc_insertion_point(field_get:hheproto.PublicKeySetMsg.analystUUID)
  return _internal_analystuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicKeySetMsg::set_analystuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.analystuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hheproto.PublicKeySetMsg.analystUUID)
}
inline std::string* PublicKeySetMsg::mutable_analystuuid() {
  std::string* _s = _internal_mutable_analystuuid();
  // @@protoc_insertion_point(field_mutable:hheproto.PublicKeySetMsg.analystUUID)
  return _s;
}
inline const std::string& PublicKeySetMsg::_internal_analystuuid() const {
  return _impl_.analystuuid_.Get();
}
inline void PublicKeySetMsg::_internal_set_analystuuid(const std::string& value) {
  
  _impl_.analystuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicKeySetMsg::_internal_mutable_analystuuid() {
  
  return _impl_.analystuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicKeySetMsg::release_analystuuid() {
  // @@protoc_insertion_point(field_release:hheproto.PublicKeySetMsg.analystUUID)
  return _impl_.analystuuid_.Release();
}
inline void PublicKeySetMsg::set_allocated_analystuuid(std::string* analystuuid) {
  if (analystuuid != nullptr) {
    
  } else {
    
  }
  _impl_.analystuuid_.SetAllocated(analystuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.analystuuid_.IsDefault()) {
    _impl_.analystuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hheproto.PublicKeySetMsg.analystUUID)
}

// -------------------------------------------------------------------

// CiphertextResult

// repeated .hheproto.CiphertextMsg result = 1;
inline int CiphertextResult::_internal_result_size() const {
  return _impl_.result_.size();
}
inline int CiphertextResult::result_size() const {
  return _internal_result_size();
}
inline void CiphertextResult::clear_result() {
  _impl_.result_.Clear();
}
inline ::hheproto::CiphertextMsg* CiphertextResult::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:hheproto.CiphertextResult.result)
  return _impl_.result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >*
CiphertextResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:hheproto.CiphertextResult.result)
  return &_impl_.result_;
}
inline const ::hheproto::CiphertextMsg& CiphertextResult::_internal_result(int index) const {
  return _impl_.result_.Get(index);
}
inline const ::hheproto::CiphertextMsg& CiphertextResult::result(int index) const {
  // @@protoc_insertion_point(field_get:hheproto.CiphertextResult.result)
  return _internal_result(index);
}
inline ::hheproto::CiphertextMsg* CiphertextResult::_internal_add_result() {
  return _impl_.result_.Add();
}
inline ::hheproto::CiphertextMsg* CiphertextResult::add_result() {
  ::hheproto::CiphertextMsg* _add = _internal_add_result();
  // @@protoc_insertion_point(field_add:hheproto.CiphertextResult.result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >&
CiphertextResult::result() const {
  // @@protoc_insertion_point(field_list:hheproto.CiphertextResult.result)
  return _impl_.result_;
}

// -------------------------------------------------------------------

// CiphertextMsg

// bytes data = 1;
inline void CiphertextMsg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CiphertextMsg::data() const {
  // @@protoc_insertion_point(field_get:hheproto.CiphertextMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CiphertextMsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hheproto.CiphertextMsg.data)
}
inline std::string* CiphertextMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hheproto.CiphertextMsg.data)
  return _s;
}
inline const std::string& CiphertextMsg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CiphertextMsg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CiphertextMsg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CiphertextMsg::release_data() {
  // @@protoc_insertion_point(field_release:hheproto.CiphertextMsg.data)
  return _impl_.data_.Release();
}
inline void CiphertextMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hheproto.CiphertextMsg.data)
}

// int32 length = 2;
inline void CiphertextMsg::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t CiphertextMsg::_internal_length() const {
  return _impl_.length_;
}
inline int32_t CiphertextMsg::length() const {
  // @@protoc_insertion_point(field_get:hheproto.CiphertextMsg.length)
  return _internal_length();
}
inline void CiphertextMsg::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void CiphertextMsg::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:hheproto.CiphertextMsg.length)
}

// -------------------------------------------------------------------

// MLModelMsg

// repeated .hheproto.CiphertextMsg weights = 1;
inline int MLModelMsg::_internal_weights_size() const {
  return _impl_.weights_.size();
}
inline int MLModelMsg::weights_size() const {
  return _internal_weights_size();
}
inline void MLModelMsg::clear_weights() {
  _impl_.weights_.Clear();
}
inline ::hheproto::CiphertextMsg* MLModelMsg::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:hheproto.MLModelMsg.weights)
  return _impl_.weights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >*
MLModelMsg::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:hheproto.MLModelMsg.weights)
  return &_impl_.weights_;
}
inline const ::hheproto::CiphertextMsg& MLModelMsg::_internal_weights(int index) const {
  return _impl_.weights_.Get(index);
}
inline const ::hheproto::CiphertextMsg& MLModelMsg::weights(int index) const {
  // @@protoc_insertion_point(field_get:hheproto.MLModelMsg.weights)
  return _internal_weights(index);
}
inline ::hheproto::CiphertextMsg* MLModelMsg::_internal_add_weights() {
  return _impl_.weights_.Add();
}
inline ::hheproto::CiphertextMsg* MLModelMsg::add_weights() {
  ::hheproto::CiphertextMsg* _add = _internal_add_weights();
  // @@protoc_insertion_point(field_add:hheproto.MLModelMsg.weights)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >&
MLModelMsg::weights() const {
  // @@protoc_insertion_point(field_list:hheproto.MLModelMsg.weights)
  return _impl_.weights_;
}

// -------------------------------------------------------------------

// EncSymmetricKeysMsg

// repeated .hheproto.CiphertextMsg key = 1;
inline int EncSymmetricKeysMsg::_internal_key_size() const {
  return _impl_.key_.size();
}
inline int EncSymmetricKeysMsg::key_size() const {
  return _internal_key_size();
}
inline void EncSymmetricKeysMsg::clear_key() {
  _impl_.key_.Clear();
}
inline ::hheproto::CiphertextMsg* EncSymmetricKeysMsg::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:hheproto.EncSymmetricKeysMsg.key)
  return _impl_.key_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >*
EncSymmetricKeysMsg::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:hheproto.EncSymmetricKeysMsg.key)
  return &_impl_.key_;
}
inline const ::hheproto::CiphertextMsg& EncSymmetricKeysMsg::_internal_key(int index) const {
  return _impl_.key_.Get(index);
}
inline const ::hheproto::CiphertextMsg& EncSymmetricKeysMsg::key(int index) const {
  // @@protoc_insertion_point(field_get:hheproto.EncSymmetricKeysMsg.key)
  return _internal_key(index);
}
inline ::hheproto::CiphertextMsg* EncSymmetricKeysMsg::_internal_add_key() {
  return _impl_.key_.Add();
}
inline ::hheproto::CiphertextMsg* EncSymmetricKeysMsg::add_key() {
  ::hheproto::CiphertextMsg* _add = _internal_add_key();
  // @@protoc_insertion_point(field_add:hheproto.EncSymmetricKeysMsg.key)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::CiphertextMsg >&
EncSymmetricKeysMsg::key() const {
  // @@protoc_insertion_point(field_list:hheproto.EncSymmetricKeysMsg.key)
  return _impl_.key_;
}

// -------------------------------------------------------------------

// EncSymmetricDataMsg

// repeated .hheproto.EncSymmetricDataRecord record = 1;
inline int EncSymmetricDataMsg::_internal_record_size() const {
  return _impl_.record_.size();
}
inline int EncSymmetricDataMsg::record_size() const {
  return _internal_record_size();
}
inline void EncSymmetricDataMsg::clear_record() {
  _impl_.record_.Clear();
}
inline ::hheproto::EncSymmetricDataRecord* EncSymmetricDataMsg::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:hheproto.EncSymmetricDataMsg.record)
  return _impl_.record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::EncSymmetricDataRecord >*
EncSymmetricDataMsg::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:hheproto.EncSymmetricDataMsg.record)
  return &_impl_.record_;
}
inline const ::hheproto::EncSymmetricDataRecord& EncSymmetricDataMsg::_internal_record(int index) const {
  return _impl_.record_.Get(index);
}
inline const ::hheproto::EncSymmetricDataRecord& EncSymmetricDataMsg::record(int index) const {
  // @@protoc_insertion_point(field_get:hheproto.EncSymmetricDataMsg.record)
  return _internal_record(index);
}
inline ::hheproto::EncSymmetricDataRecord* EncSymmetricDataMsg::_internal_add_record() {
  return _impl_.record_.Add();
}
inline ::hheproto::EncSymmetricDataRecord* EncSymmetricDataMsg::add_record() {
  ::hheproto::EncSymmetricDataRecord* _add = _internal_add_record();
  // @@protoc_insertion_point(field_add:hheproto.EncSymmetricDataMsg.record)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hheproto::EncSymmetricDataRecord >&
EncSymmetricDataMsg::record() const {
  // @@protoc_insertion_point(field_list:hheproto.EncSymmetricDataMsg.record)
  return _impl_.record_;
}

// string patientID = 2;
inline void EncSymmetricDataMsg::clear_patientid() {
  _impl_.patientid_.ClearToEmpty();
}
inline const std::string& EncSymmetricDataMsg::patientid() const {
  // @@protoc_insertion_point(field_get:hheproto.EncSymmetricDataMsg.patientID)
  return _internal_patientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncSymmetricDataMsg::set_patientid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.patientid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hheproto.EncSymmetricDataMsg.patientID)
}
inline std::string* EncSymmetricDataMsg::mutable_patientid() {
  std::string* _s = _internal_mutable_patientid();
  // @@protoc_insertion_point(field_mutable:hheproto.EncSymmetricDataMsg.patientID)
  return _s;
}
inline const std::string& EncSymmetricDataMsg::_internal_patientid() const {
  return _impl_.patientid_.Get();
}
inline void EncSymmetricDataMsg::_internal_set_patientid(const std::string& value) {
  
  _impl_.patientid_.Set(value, GetArenaForAllocation());
}
inline std::string* EncSymmetricDataMsg::_internal_mutable_patientid() {
  
  return _impl_.patientid_.Mutable(GetArenaForAllocation());
}
inline std::string* EncSymmetricDataMsg::release_patientid() {
  // @@protoc_insertion_point(field_release:hheproto.EncSymmetricDataMsg.patientID)
  return _impl_.patientid_.Release();
}
inline void EncSymmetricDataMsg::set_allocated_patientid(std::string* patientid) {
  if (patientid != nullptr) {
    
  } else {
    
  }
  _impl_.patientid_.SetAllocated(patientid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.patientid_.IsDefault()) {
    _impl_.patientid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hheproto.EncSymmetricDataMsg.patientID)
}

// -------------------------------------------------------------------

// EncSymmetricDataRecord

// repeated uint64 value = 1;
inline int EncSymmetricDataRecord::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int EncSymmetricDataRecord::value_size() const {
  return _internal_value_size();
}
inline void EncSymmetricDataRecord::clear_value() {
  _impl_.value_.Clear();
}
inline uint64_t EncSymmetricDataRecord::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline uint64_t EncSymmetricDataRecord::value(int index) const {
  // @@protoc_insertion_point(field_get:hheproto.EncSymmetricDataRecord.value)
  return _internal_value(index);
}
inline void EncSymmetricDataRecord::set_value(int index, uint64_t value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:hheproto.EncSymmetricDataRecord.value)
}
inline void EncSymmetricDataRecord::_internal_add_value(uint64_t value) {
  _impl_.value_.Add(value);
}
inline void EncSymmetricDataRecord::add_value(uint64_t value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:hheproto.EncSymmetricDataRecord.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
EncSymmetricDataRecord::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
EncSymmetricDataRecord::value() const {
  // @@protoc_insertion_point(field_list:hheproto.EncSymmetricDataRecord.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
EncSymmetricDataRecord::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
EncSymmetricDataRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:hheproto.EncSymmetricDataRecord.value)
  return _internal_mutable_value();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hheproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hhe_2eproto
