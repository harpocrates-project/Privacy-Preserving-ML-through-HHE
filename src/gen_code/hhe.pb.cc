// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hhe.proto

#include "hhe.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hheproto {
PROTOBUF_CONSTEXPR CiphertextBytes::CiphertextBytes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hhedecomp_)*/{}
  , /*decltype(_impl_.analystid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CiphertextBytesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CiphertextBytesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CiphertextBytesDefaultTypeInternal() {}
  union {
    CiphertextBytes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CiphertextBytesDefaultTypeInternal _CiphertextBytes_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR PublicKeyMsg::PublicKeyMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublicKeyMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicKeyMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicKeyMsgDefaultTypeInternal() {}
  union {
    PublicKeyMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicKeyMsgDefaultTypeInternal _PublicKeyMsg_default_instance_;
PROTOBUF_CONSTEXPR PublicKeySetMsg::PublicKeySetMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.analystuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pk_)*/nullptr
  , /*decltype(_impl_.rk_)*/nullptr
  , /*decltype(_impl_.gk_)*/nullptr
  , /*decltype(_impl_.csp_rk_)*/nullptr
  , /*decltype(_impl_.csp_gk_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublicKeySetMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicKeySetMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicKeySetMsgDefaultTypeInternal() {}
  union {
    PublicKeySetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicKeySetMsgDefaultTypeInternal _PublicKeySetMsg_default_instance_;
PROTOBUF_CONSTEXPR CiphertextResult::CiphertextResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CiphertextResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CiphertextResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CiphertextResultDefaultTypeInternal() {}
  union {
    CiphertextResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CiphertextResultDefaultTypeInternal _CiphertextResult_default_instance_;
PROTOBUF_CONSTEXPR CiphertextMsg::CiphertextMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CiphertextMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CiphertextMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CiphertextMsgDefaultTypeInternal() {}
  union {
    CiphertextMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CiphertextMsgDefaultTypeInternal _CiphertextMsg_default_instance_;
PROTOBUF_CONSTEXPR MLModelMsg::MLModelMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weights_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MLModelMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLModelMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLModelMsgDefaultTypeInternal() {}
  union {
    MLModelMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLModelMsgDefaultTypeInternal _MLModelMsg_default_instance_;
PROTOBUF_CONSTEXPR EncSymmetricKeysMsg::EncSymmetricKeysMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncSymmetricKeysMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncSymmetricKeysMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncSymmetricKeysMsgDefaultTypeInternal() {}
  union {
    EncSymmetricKeysMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncSymmetricKeysMsgDefaultTypeInternal _EncSymmetricKeysMsg_default_instance_;
PROTOBUF_CONSTEXPR EncSymmetricDataMsg::EncSymmetricDataMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.record_)*/{}
  , /*decltype(_impl_.patientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncSymmetricDataMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncSymmetricDataMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncSymmetricDataMsgDefaultTypeInternal() {}
  union {
    EncSymmetricDataMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncSymmetricDataMsgDefaultTypeInternal _EncSymmetricDataMsg_default_instance_;
PROTOBUF_CONSTEXPR EncSymmetricDataRecord::EncSymmetricDataRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._value_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncSymmetricDataRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncSymmetricDataRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncSymmetricDataRecordDefaultTypeInternal() {}
  union {
    EncSymmetricDataRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncSymmetricDataRecordDefaultTypeInternal _EncSymmetricDataRecord_default_instance_;
PROTOBUF_CONSTEXPR DataFile::DataFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataFileDefaultTypeInternal() {}
  union {
    DataFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataFileDefaultTypeInternal _DataFile_default_instance_;
PROTOBUF_CONSTEXPR MyRequest::MyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyRequestDefaultTypeInternal() {}
  union {
    MyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyRequestDefaultTypeInternal _MyRequest_default_instance_;
PROTOBUF_CONSTEXPR MyResponse::MyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyResponseDefaultTypeInternal() {}
  union {
    MyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyResponseDefaultTypeInternal _MyResponse_default_instance_;
}  // namespace hheproto
static ::_pb::Metadata file_level_metadata_hhe_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_hhe_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_hhe_2eproto = nullptr;

const uint32_t TableStruct_hhe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::CiphertextBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::CiphertextBytes, _impl_.hhedecomp_),
  PROTOBUF_FIELD_OFFSET(::hheproto::CiphertextBytes, _impl_.analystid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeyMsg, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeyMsg, _impl_.length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeySetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeySetMsg, _impl_.pk_),
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeySetMsg, _impl_.rk_),
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeySetMsg, _impl_.gk_),
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeySetMsg, _impl_.csp_rk_),
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeySetMsg, _impl_.csp_gk_),
  PROTOBUF_FIELD_OFFSET(::hheproto::PublicKeySetMsg, _impl_.analystuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::CiphertextResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::CiphertextResult, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::CiphertextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::CiphertextMsg, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::hheproto::CiphertextMsg, _impl_.length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::MLModelMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::MLModelMsg, _impl_.weights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::EncSymmetricKeysMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::EncSymmetricKeysMsg, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::EncSymmetricDataMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::EncSymmetricDataMsg, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::hheproto::EncSymmetricDataMsg, _impl_.patientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::EncSymmetricDataRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::EncSymmetricDataRecord, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::DataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::DataFile, _impl_.filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::MyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::MyRequest, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hheproto::MyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hheproto::MyResponse, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::hheproto::CiphertextBytes)},
  { 8, -1, -1, sizeof(::hheproto::Empty)},
  { 14, -1, -1, sizeof(::hheproto::PublicKeyMsg)},
  { 22, -1, -1, sizeof(::hheproto::PublicKeySetMsg)},
  { 34, -1, -1, sizeof(::hheproto::CiphertextResult)},
  { 41, -1, -1, sizeof(::hheproto::CiphertextMsg)},
  { 49, -1, -1, sizeof(::hheproto::MLModelMsg)},
  { 56, -1, -1, sizeof(::hheproto::EncSymmetricKeysMsg)},
  { 63, -1, -1, sizeof(::hheproto::EncSymmetricDataMsg)},
  { 71, -1, -1, sizeof(::hheproto::EncSymmetricDataRecord)},
  { 78, -1, -1, sizeof(::hheproto::DataFile)},
  { 85, -1, -1, sizeof(::hheproto::MyRequest)},
  { 92, -1, -1, sizeof(::hheproto::MyResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hheproto::_CiphertextBytes_default_instance_._instance,
  &::hheproto::_Empty_default_instance_._instance,
  &::hheproto::_PublicKeyMsg_default_instance_._instance,
  &::hheproto::_PublicKeySetMsg_default_instance_._instance,
  &::hheproto::_CiphertextResult_default_instance_._instance,
  &::hheproto::_CiphertextMsg_default_instance_._instance,
  &::hheproto::_MLModelMsg_default_instance_._instance,
  &::hheproto::_EncSymmetricKeysMsg_default_instance_._instance,
  &::hheproto::_EncSymmetricDataMsg_default_instance_._instance,
  &::hheproto::_EncSymmetricDataRecord_default_instance_._instance,
  &::hheproto::_DataFile_default_instance_._instance,
  &::hheproto::_MyRequest_default_instance_._instance,
  &::hheproto::_MyResponse_default_instance_._instance,
};

const char descriptor_table_protodef_hhe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\thhe.proto\022\010hheproto\"7\n\017CiphertextBytes"
  "\022\021\n\tHHEDecomp\030\001 \003(\014\022\021\n\tanalystID\030\002 \001(\t\"\007"
  "\n\005Empty\",\n\014PublicKeyMsg\022\014\n\004data\030\001 \001(\014\022\016\n"
  "\006length\030\002 \001(\005\"\342\001\n\017PublicKeySetMsg\022\"\n\002pk\030"
  "\001 \001(\0132\026.hheproto.PublicKeyMsg\022\"\n\002rk\030\002 \001("
  "\0132\026.hheproto.PublicKeyMsg\022\"\n\002gk\030\003 \001(\0132\026."
  "hheproto.PublicKeyMsg\022&\n\006csp_rk\030\004 \001(\0132\026."
  "hheproto.PublicKeyMsg\022&\n\006csp_gk\030\005 \001(\0132\026."
  "hheproto.PublicKeyMsg\022\023\n\013analystUUID\030\006 \001"
  "(\t\";\n\020CiphertextResult\022\'\n\006result\030\001 \003(\0132\027"
  ".hheproto.CiphertextMsg\"-\n\rCiphertextMsg"
  "\022\014\n\004data\030\001 \001(\014\022\016\n\006length\030\002 \001(\005\"6\n\nMLMode"
  "lMsg\022(\n\007weights\030\001 \003(\0132\027.hheproto.Ciphert"
  "extMsg\";\n\023EncSymmetricKeysMsg\022$\n\003key\030\001 \003"
  "(\0132\027.hheproto.CiphertextMsg\"Z\n\023EncSymmet"
  "ricDataMsg\0220\n\006record\030\001 \003(\0132 .hheproto.En"
  "cSymmetricDataRecord\022\021\n\tpatientID\030\002 \001(\t\""
  "\'\n\026EncSymmetricDataRecord\022\r\n\005value\030\001 \003(\004"
  "\"\034\n\010DataFile\022\020\n\010filename\030\001 \001(\t\"\034\n\tMyRequ"
  "est\022\017\n\007message\030\001 \001(\t\"\036\n\nMyResponse\022\020\n\010re"
  "sponse\030\001 \001(\t2\220\001\n\016AnalystService\0229\n\014getPu"
  "blicKey\022\017.hheproto.Empty\032\026.hheproto.Publ"
  "icKeyMsg\"\000\022C\n\022addEncryptedResult\022\032.hhepr"
  "oto.CiphertextResult\032\017.hheproto.Empty\"\0002"
  "\215\003\n\nCSPService\022=\n\raddPublicKeys\022\031.hhepro"
  "to.PublicKeySetMsg\032\017.hheproto.Empty\"\000\022D\n"
  "\020addEncryptedKeys\022\035.hheproto.EncSymmetri"
  "cKeysMsg\032\017.hheproto.Empty\"\000\022D\n\020addEncryp"
  "tedData\022\035.hheproto.EncSymmetricDataMsg\032\017"
  ".hheproto.Empty\"\000\0225\n\naddMLModel\022\024.hhepro"
  "to.MLModelMsg\032\017.hheproto.Empty\"\000\022=\n\reval"
  "uateModel\022\031.hheproto.CiphertextBytes\032\017.h"
  "heproto.Empty\"\000\022>\n\025evaluateModelFromFile"
  "\022\022.hheproto.DataFile\032\017.hheproto.Empty\"\0002"
  "E\n\tMyService\0228\n\013GetResponse\022\023.hheproto.M"
  "yRequest\032\024.hheproto.MyResponseB\006\242\002\003HHEb\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_hhe_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hhe_2eproto = {
    false, false, 1446, descriptor_table_protodef_hhe_2eproto,
    "hhe.proto",
    &descriptor_table_hhe_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_hhe_2eproto::offsets,
    file_level_metadata_hhe_2eproto, file_level_enum_descriptors_hhe_2eproto,
    file_level_service_descriptors_hhe_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hhe_2eproto_getter() {
  return &descriptor_table_hhe_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hhe_2eproto(&descriptor_table_hhe_2eproto);
namespace hheproto {

// ===================================================================

class CiphertextBytes::_Internal {
 public:
};

CiphertextBytes::CiphertextBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.CiphertextBytes)
}
CiphertextBytes::CiphertextBytes(const CiphertextBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CiphertextBytes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hhedecomp_){from._impl_.hhedecomp_}
    , decltype(_impl_.analystid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.analystid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analystid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_analystid().empty()) {
    _this->_impl_.analystid_.Set(from._internal_analystid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hheproto.CiphertextBytes)
}

inline void CiphertextBytes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hhedecomp_){arena}
    , decltype(_impl_.analystid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.analystid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analystid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CiphertextBytes::~CiphertextBytes() {
  // @@protoc_insertion_point(destructor:hheproto.CiphertextBytes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CiphertextBytes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hhedecomp_.~RepeatedPtrField();
  _impl_.analystid_.Destroy();
}

void CiphertextBytes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CiphertextBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.CiphertextBytes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hhedecomp_.Clear();
  _impl_.analystid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CiphertextBytes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes HHEDecomp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hhedecomp();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string analystID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_analystid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hheproto.CiphertextBytes.analystID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CiphertextBytes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.CiphertextBytes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes HHEDecomp = 1;
  for (int i = 0, n = this->_internal_hhedecomp_size(); i < n; i++) {
    const auto& s = this->_internal_hhedecomp(i);
    target = stream->WriteBytes(1, s, target);
  }

  // string analystID = 2;
  if (!this->_internal_analystid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analystid().data(), static_cast<int>(this->_internal_analystid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hheproto.CiphertextBytes.analystID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_analystid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.CiphertextBytes)
  return target;
}

size_t CiphertextBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.CiphertextBytes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes HHEDecomp = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.hhedecomp_.size());
  for (int i = 0, n = _impl_.hhedecomp_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.hhedecomp_.Get(i));
  }

  // string analystID = 2;
  if (!this->_internal_analystid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analystid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CiphertextBytes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CiphertextBytes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CiphertextBytes::GetClassData() const { return &_class_data_; }


void CiphertextBytes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CiphertextBytes*>(&to_msg);
  auto& from = static_cast<const CiphertextBytes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.CiphertextBytes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hhedecomp_.MergeFrom(from._impl_.hhedecomp_);
  if (!from._internal_analystid().empty()) {
    _this->_internal_set_analystid(from._internal_analystid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CiphertextBytes::CopyFrom(const CiphertextBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.CiphertextBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CiphertextBytes::IsInitialized() const {
  return true;
}

void CiphertextBytes::InternalSwap(CiphertextBytes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hhedecomp_.InternalSwap(&other->_impl_.hhedecomp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.analystid_, lhs_arena,
      &other->_impl_.analystid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CiphertextBytes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[0]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:hheproto.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hheproto.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[1]);
}

// ===================================================================

class PublicKeyMsg::_Internal {
 public:
};

PublicKeyMsg::PublicKeyMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.PublicKeyMsg)
}
PublicKeyMsg::PublicKeyMsg(const PublicKeyMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicKeyMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.length_ = from._impl_.length_;
  // @@protoc_insertion_point(copy_constructor:hheproto.PublicKeyMsg)
}

inline void PublicKeyMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicKeyMsg::~PublicKeyMsg() {
  // @@protoc_insertion_point(destructor:hheproto.PublicKeyMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicKeyMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void PublicKeyMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicKeyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.PublicKeyMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKeyMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicKeyMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.PublicKeyMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.PublicKeyMsg)
  return target;
}

size_t PublicKeyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.PublicKeyMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicKeyMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicKeyMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicKeyMsg::GetClassData() const { return &_class_data_; }


void PublicKeyMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicKeyMsg*>(&to_msg);
  auto& from = static_cast<const PublicKeyMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.PublicKeyMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKeyMsg::CopyFrom(const PublicKeyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.PublicKeyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyMsg::IsInitialized() const {
  return true;
}

void PublicKeyMsg::InternalSwap(PublicKeyMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.length_, other->_impl_.length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKeyMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[2]);
}

// ===================================================================

class PublicKeySetMsg::_Internal {
 public:
  static const ::hheproto::PublicKeyMsg& pk(const PublicKeySetMsg* msg);
  static const ::hheproto::PublicKeyMsg& rk(const PublicKeySetMsg* msg);
  static const ::hheproto::PublicKeyMsg& gk(const PublicKeySetMsg* msg);
  static const ::hheproto::PublicKeyMsg& csp_rk(const PublicKeySetMsg* msg);
  static const ::hheproto::PublicKeyMsg& csp_gk(const PublicKeySetMsg* msg);
};

const ::hheproto::PublicKeyMsg&
PublicKeySetMsg::_Internal::pk(const PublicKeySetMsg* msg) {
  return *msg->_impl_.pk_;
}
const ::hheproto::PublicKeyMsg&
PublicKeySetMsg::_Internal::rk(const PublicKeySetMsg* msg) {
  return *msg->_impl_.rk_;
}
const ::hheproto::PublicKeyMsg&
PublicKeySetMsg::_Internal::gk(const PublicKeySetMsg* msg) {
  return *msg->_impl_.gk_;
}
const ::hheproto::PublicKeyMsg&
PublicKeySetMsg::_Internal::csp_rk(const PublicKeySetMsg* msg) {
  return *msg->_impl_.csp_rk_;
}
const ::hheproto::PublicKeyMsg&
PublicKeySetMsg::_Internal::csp_gk(const PublicKeySetMsg* msg) {
  return *msg->_impl_.csp_gk_;
}
PublicKeySetMsg::PublicKeySetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.PublicKeySetMsg)
}
PublicKeySetMsg::PublicKeySetMsg(const PublicKeySetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicKeySetMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.analystuuid_){}
    , decltype(_impl_.pk_){nullptr}
    , decltype(_impl_.rk_){nullptr}
    , decltype(_impl_.gk_){nullptr}
    , decltype(_impl_.csp_rk_){nullptr}
    , decltype(_impl_.csp_gk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.analystuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analystuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_analystuuid().empty()) {
    _this->_impl_.analystuuid_.Set(from._internal_analystuuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pk()) {
    _this->_impl_.pk_ = new ::hheproto::PublicKeyMsg(*from._impl_.pk_);
  }
  if (from._internal_has_rk()) {
    _this->_impl_.rk_ = new ::hheproto::PublicKeyMsg(*from._impl_.rk_);
  }
  if (from._internal_has_gk()) {
    _this->_impl_.gk_ = new ::hheproto::PublicKeyMsg(*from._impl_.gk_);
  }
  if (from._internal_has_csp_rk()) {
    _this->_impl_.csp_rk_ = new ::hheproto::PublicKeyMsg(*from._impl_.csp_rk_);
  }
  if (from._internal_has_csp_gk()) {
    _this->_impl_.csp_gk_ = new ::hheproto::PublicKeyMsg(*from._impl_.csp_gk_);
  }
  // @@protoc_insertion_point(copy_constructor:hheproto.PublicKeySetMsg)
}

inline void PublicKeySetMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.analystuuid_){}
    , decltype(_impl_.pk_){nullptr}
    , decltype(_impl_.rk_){nullptr}
    , decltype(_impl_.gk_){nullptr}
    , decltype(_impl_.csp_rk_){nullptr}
    , decltype(_impl_.csp_gk_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.analystuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.analystuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicKeySetMsg::~PublicKeySetMsg() {
  // @@protoc_insertion_point(destructor:hheproto.PublicKeySetMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicKeySetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.analystuuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pk_;
  if (this != internal_default_instance()) delete _impl_.rk_;
  if (this != internal_default_instance()) delete _impl_.gk_;
  if (this != internal_default_instance()) delete _impl_.csp_rk_;
  if (this != internal_default_instance()) delete _impl_.csp_gk_;
}

void PublicKeySetMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicKeySetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.PublicKeySetMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.analystuuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pk_ != nullptr) {
    delete _impl_.pk_;
  }
  _impl_.pk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rk_ != nullptr) {
    delete _impl_.rk_;
  }
  _impl_.rk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.gk_ != nullptr) {
    delete _impl_.gk_;
  }
  _impl_.gk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.csp_rk_ != nullptr) {
    delete _impl_.csp_rk_;
  }
  _impl_.csp_rk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.csp_gk_ != nullptr) {
    delete _impl_.csp_gk_;
  }
  _impl_.csp_gk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKeySetMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hheproto.PublicKeyMsg pk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .hheproto.PublicKeyMsg rk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .hheproto.PublicKeyMsg gk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .hheproto.PublicKeyMsg csp_rk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_csp_rk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .hheproto.PublicKeyMsg csp_gk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_csp_gk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string analystUUID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_analystuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hheproto.PublicKeySetMsg.analystUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicKeySetMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.PublicKeySetMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hheproto.PublicKeyMsg pk = 1;
  if (this->_internal_has_pk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pk(this),
        _Internal::pk(this).GetCachedSize(), target, stream);
  }

  // .hheproto.PublicKeyMsg rk = 2;
  if (this->_internal_has_rk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rk(this),
        _Internal::rk(this).GetCachedSize(), target, stream);
  }

  // .hheproto.PublicKeyMsg gk = 3;
  if (this->_internal_has_gk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gk(this),
        _Internal::gk(this).GetCachedSize(), target, stream);
  }

  // .hheproto.PublicKeyMsg csp_rk = 4;
  if (this->_internal_has_csp_rk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::csp_rk(this),
        _Internal::csp_rk(this).GetCachedSize(), target, stream);
  }

  // .hheproto.PublicKeyMsg csp_gk = 5;
  if (this->_internal_has_csp_gk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::csp_gk(this),
        _Internal::csp_gk(this).GetCachedSize(), target, stream);
  }

  // string analystUUID = 6;
  if (!this->_internal_analystuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_analystuuid().data(), static_cast<int>(this->_internal_analystuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hheproto.PublicKeySetMsg.analystUUID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_analystuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.PublicKeySetMsg)
  return target;
}

size_t PublicKeySetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.PublicKeySetMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string analystUUID = 6;
  if (!this->_internal_analystuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_analystuuid());
  }

  // .hheproto.PublicKeyMsg pk = 1;
  if (this->_internal_has_pk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pk_);
  }

  // .hheproto.PublicKeyMsg rk = 2;
  if (this->_internal_has_rk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rk_);
  }

  // .hheproto.PublicKeyMsg gk = 3;
  if (this->_internal_has_gk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gk_);
  }

  // .hheproto.PublicKeyMsg csp_rk = 4;
  if (this->_internal_has_csp_rk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.csp_rk_);
  }

  // .hheproto.PublicKeyMsg csp_gk = 5;
  if (this->_internal_has_csp_gk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.csp_gk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicKeySetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicKeySetMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicKeySetMsg::GetClassData() const { return &_class_data_; }


void PublicKeySetMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicKeySetMsg*>(&to_msg);
  auto& from = static_cast<const PublicKeySetMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.PublicKeySetMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_analystuuid().empty()) {
    _this->_internal_set_analystuuid(from._internal_analystuuid());
  }
  if (from._internal_has_pk()) {
    _this->_internal_mutable_pk()->::hheproto::PublicKeyMsg::MergeFrom(
        from._internal_pk());
  }
  if (from._internal_has_rk()) {
    _this->_internal_mutable_rk()->::hheproto::PublicKeyMsg::MergeFrom(
        from._internal_rk());
  }
  if (from._internal_has_gk()) {
    _this->_internal_mutable_gk()->::hheproto::PublicKeyMsg::MergeFrom(
        from._internal_gk());
  }
  if (from._internal_has_csp_rk()) {
    _this->_internal_mutable_csp_rk()->::hheproto::PublicKeyMsg::MergeFrom(
        from._internal_csp_rk());
  }
  if (from._internal_has_csp_gk()) {
    _this->_internal_mutable_csp_gk()->::hheproto::PublicKeyMsg::MergeFrom(
        from._internal_csp_gk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKeySetMsg::CopyFrom(const PublicKeySetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.PublicKeySetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeySetMsg::IsInitialized() const {
  return true;
}

void PublicKeySetMsg::InternalSwap(PublicKeySetMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.analystuuid_, lhs_arena,
      &other->_impl_.analystuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublicKeySetMsg, _impl_.csp_gk_)
      + sizeof(PublicKeySetMsg::_impl_.csp_gk_)
      - PROTOBUF_FIELD_OFFSET(PublicKeySetMsg, _impl_.pk_)>(
          reinterpret_cast<char*>(&_impl_.pk_),
          reinterpret_cast<char*>(&other->_impl_.pk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKeySetMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[3]);
}

// ===================================================================

class CiphertextResult::_Internal {
 public:
};

CiphertextResult::CiphertextResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.CiphertextResult)
}
CiphertextResult::CiphertextResult(const CiphertextResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CiphertextResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){from._impl_.result_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hheproto.CiphertextResult)
}

inline void CiphertextResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CiphertextResult::~CiphertextResult() {
  // @@protoc_insertion_point(destructor:hheproto.CiphertextResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CiphertextResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedPtrField();
}

void CiphertextResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CiphertextResult::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.CiphertextResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CiphertextResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .hheproto.CiphertextMsg result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CiphertextResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.CiphertextResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hheproto.CiphertextMsg result = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.CiphertextResult)
  return target;
}

size_t CiphertextResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.CiphertextResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hheproto.CiphertextMsg result = 1;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->_impl_.result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CiphertextResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CiphertextResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CiphertextResult::GetClassData() const { return &_class_data_; }


void CiphertextResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CiphertextResult*>(&to_msg);
  auto& from = static_cast<const CiphertextResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.CiphertextResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_.MergeFrom(from._impl_.result_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CiphertextResult::CopyFrom(const CiphertextResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.CiphertextResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CiphertextResult::IsInitialized() const {
  return true;
}

void CiphertextResult::InternalSwap(CiphertextResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CiphertextResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[4]);
}

// ===================================================================

class CiphertextMsg::_Internal {
 public:
};

CiphertextMsg::CiphertextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.CiphertextMsg)
}
CiphertextMsg::CiphertextMsg(const CiphertextMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CiphertextMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.length_ = from._impl_.length_;
  // @@protoc_insertion_point(copy_constructor:hheproto.CiphertextMsg)
}

inline void CiphertextMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CiphertextMsg::~CiphertextMsg() {
  // @@protoc_insertion_point(destructor:hheproto.CiphertextMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CiphertextMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CiphertextMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CiphertextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.CiphertextMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CiphertextMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CiphertextMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.CiphertextMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.CiphertextMsg)
  return target;
}

size_t CiphertextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.CiphertextMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CiphertextMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CiphertextMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CiphertextMsg::GetClassData() const { return &_class_data_; }


void CiphertextMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CiphertextMsg*>(&to_msg);
  auto& from = static_cast<const CiphertextMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.CiphertextMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CiphertextMsg::CopyFrom(const CiphertextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.CiphertextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CiphertextMsg::IsInitialized() const {
  return true;
}

void CiphertextMsg::InternalSwap(CiphertextMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.length_, other->_impl_.length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CiphertextMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[5]);
}

// ===================================================================

class MLModelMsg::_Internal {
 public:
};

MLModelMsg::MLModelMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.MLModelMsg)
}
MLModelMsg::MLModelMsg(const MLModelMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MLModelMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weights_){from._impl_.weights_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hheproto.MLModelMsg)
}

inline void MLModelMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weights_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MLModelMsg::~MLModelMsg() {
  // @@protoc_insertion_point(destructor:hheproto.MLModelMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MLModelMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weights_.~RepeatedPtrField();
}

void MLModelMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MLModelMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.MLModelMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MLModelMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .hheproto.CiphertextMsg weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MLModelMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.MLModelMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hheproto.CiphertextMsg weights = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_weights_size()); i < n; i++) {
    const auto& repfield = this->_internal_weights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.MLModelMsg)
  return target;
}

size_t MLModelMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.MLModelMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hheproto.CiphertextMsg weights = 1;
  total_size += 1UL * this->_internal_weights_size();
  for (const auto& msg : this->_impl_.weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MLModelMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MLModelMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MLModelMsg::GetClassData() const { return &_class_data_; }


void MLModelMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MLModelMsg*>(&to_msg);
  auto& from = static_cast<const MLModelMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.MLModelMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.weights_.MergeFrom(from._impl_.weights_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MLModelMsg::CopyFrom(const MLModelMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.MLModelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLModelMsg::IsInitialized() const {
  return true;
}

void MLModelMsg::InternalSwap(MLModelMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.weights_.InternalSwap(&other->_impl_.weights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MLModelMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[6]);
}

// ===================================================================

class EncSymmetricKeysMsg::_Internal {
 public:
};

EncSymmetricKeysMsg::EncSymmetricKeysMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.EncSymmetricKeysMsg)
}
EncSymmetricKeysMsg::EncSymmetricKeysMsg(const EncSymmetricKeysMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncSymmetricKeysMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){from._impl_.key_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hheproto.EncSymmetricKeysMsg)
}

inline void EncSymmetricKeysMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EncSymmetricKeysMsg::~EncSymmetricKeysMsg() {
  // @@protoc_insertion_point(destructor:hheproto.EncSymmetricKeysMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncSymmetricKeysMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.~RepeatedPtrField();
}

void EncSymmetricKeysMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncSymmetricKeysMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.EncSymmetricKeysMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncSymmetricKeysMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .hheproto.CiphertextMsg key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncSymmetricKeysMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.EncSymmetricKeysMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hheproto.CiphertextMsg key = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.EncSymmetricKeysMsg)
  return target;
}

size_t EncSymmetricKeysMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.EncSymmetricKeysMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hheproto.CiphertextMsg key = 1;
  total_size += 1UL * this->_internal_key_size();
  for (const auto& msg : this->_impl_.key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncSymmetricKeysMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncSymmetricKeysMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncSymmetricKeysMsg::GetClassData() const { return &_class_data_; }


void EncSymmetricKeysMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncSymmetricKeysMsg*>(&to_msg);
  auto& from = static_cast<const EncSymmetricKeysMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.EncSymmetricKeysMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_.MergeFrom(from._impl_.key_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncSymmetricKeysMsg::CopyFrom(const EncSymmetricKeysMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.EncSymmetricKeysMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncSymmetricKeysMsg::IsInitialized() const {
  return true;
}

void EncSymmetricKeysMsg::InternalSwap(EncSymmetricKeysMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_.InternalSwap(&other->_impl_.key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncSymmetricKeysMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[7]);
}

// ===================================================================

class EncSymmetricDataMsg::_Internal {
 public:
};

EncSymmetricDataMsg::EncSymmetricDataMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.EncSymmetricDataMsg)
}
EncSymmetricDataMsg::EncSymmetricDataMsg(const EncSymmetricDataMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncSymmetricDataMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.record_){from._impl_.record_}
    , decltype(_impl_.patientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.patientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.patientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_patientid().empty()) {
    _this->_impl_.patientid_.Set(from._internal_patientid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hheproto.EncSymmetricDataMsg)
}

inline void EncSymmetricDataMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.record_){arena}
    , decltype(_impl_.patientid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.patientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.patientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncSymmetricDataMsg::~EncSymmetricDataMsg() {
  // @@protoc_insertion_point(destructor:hheproto.EncSymmetricDataMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncSymmetricDataMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.record_.~RepeatedPtrField();
  _impl_.patientid_.Destroy();
}

void EncSymmetricDataMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncSymmetricDataMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.EncSymmetricDataMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.record_.Clear();
  _impl_.patientid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncSymmetricDataMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .hheproto.EncSymmetricDataRecord record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string patientID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_patientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hheproto.EncSymmetricDataMsg.patientID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncSymmetricDataMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.EncSymmetricDataMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hheproto.EncSymmetricDataRecord record = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string patientID = 2;
  if (!this->_internal_patientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_patientid().data(), static_cast<int>(this->_internal_patientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hheproto.EncSymmetricDataMsg.patientID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_patientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.EncSymmetricDataMsg)
  return target;
}

size_t EncSymmetricDataMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.EncSymmetricDataMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hheproto.EncSymmetricDataRecord record = 1;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->_impl_.record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string patientID = 2;
  if (!this->_internal_patientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_patientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncSymmetricDataMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncSymmetricDataMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncSymmetricDataMsg::GetClassData() const { return &_class_data_; }


void EncSymmetricDataMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncSymmetricDataMsg*>(&to_msg);
  auto& from = static_cast<const EncSymmetricDataMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.EncSymmetricDataMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.record_.MergeFrom(from._impl_.record_);
  if (!from._internal_patientid().empty()) {
    _this->_internal_set_patientid(from._internal_patientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncSymmetricDataMsg::CopyFrom(const EncSymmetricDataMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.EncSymmetricDataMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncSymmetricDataMsg::IsInitialized() const {
  return true;
}

void EncSymmetricDataMsg::InternalSwap(EncSymmetricDataMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.record_.InternalSwap(&other->_impl_.record_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.patientid_, lhs_arena,
      &other->_impl_.patientid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EncSymmetricDataMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[8]);
}

// ===================================================================

class EncSymmetricDataRecord::_Internal {
 public:
};

EncSymmetricDataRecord::EncSymmetricDataRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.EncSymmetricDataRecord)
}
EncSymmetricDataRecord::EncSymmetricDataRecord(const EncSymmetricDataRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncSymmetricDataRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hheproto.EncSymmetricDataRecord)
}

inline void EncSymmetricDataRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._value_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EncSymmetricDataRecord::~EncSymmetricDataRecord() {
  // @@protoc_insertion_point(destructor:hheproto.EncSymmetricDataRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncSymmetricDataRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedField();
}

void EncSymmetricDataRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncSymmetricDataRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.EncSymmetricDataRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncSymmetricDataRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncSymmetricDataRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.EncSymmetricDataRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 value = 1;
  {
    int byte_size = _impl_._value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.EncSymmetricDataRecord)
  return target;
}

size_t EncSymmetricDataRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.EncSymmetricDataRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 value = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncSymmetricDataRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncSymmetricDataRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncSymmetricDataRecord::GetClassData() const { return &_class_data_; }


void EncSymmetricDataRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncSymmetricDataRecord*>(&to_msg);
  auto& from = static_cast<const EncSymmetricDataRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.EncSymmetricDataRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncSymmetricDataRecord::CopyFrom(const EncSymmetricDataRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.EncSymmetricDataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncSymmetricDataRecord::IsInitialized() const {
  return true;
}

void EncSymmetricDataRecord::InternalSwap(EncSymmetricDataRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncSymmetricDataRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[9]);
}

// ===================================================================

class DataFile::_Internal {
 public:
};

DataFile::DataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.DataFile)
}
DataFile::DataFile(const DataFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hheproto.DataFile)
}

inline void DataFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataFile::~DataFile() {
  // @@protoc_insertion_point(destructor:hheproto.DataFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
}

void DataFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.DataFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hheproto.DataFile.filename"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.DataFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hheproto.DataFile.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.DataFile)
  return target;
}

size_t DataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.DataFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataFile::GetClassData() const { return &_class_data_; }


void DataFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataFile*>(&to_msg);
  auto& from = static_cast<const DataFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.DataFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataFile::CopyFrom(const DataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFile::IsInitialized() const {
  return true;
}

void DataFile::InternalSwap(DataFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[10]);
}

// ===================================================================

class MyRequest::_Internal {
 public:
};

MyRequest::MyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.MyRequest)
}
MyRequest::MyRequest(const MyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hheproto.MyRequest)
}

inline void MyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MyRequest::~MyRequest() {
  // @@protoc_insertion_point(destructor:hheproto.MyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void MyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.MyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hheproto.MyRequest.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.MyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hheproto.MyRequest.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.MyRequest)
  return target;
}

size_t MyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.MyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyRequest::GetClassData() const { return &_class_data_; }


void MyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyRequest*>(&to_msg);
  auto& from = static_cast<const MyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.MyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyRequest::CopyFrom(const MyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.MyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyRequest::IsInitialized() const {
  return true;
}

void MyRequest::InternalSwap(MyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[11]);
}

// ===================================================================

class MyResponse::_Internal {
 public:
};

MyResponse::MyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hheproto.MyResponse)
}
MyResponse::MyResponse(const MyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_response().empty()) {
    _this->_impl_.response_.Set(from._internal_response(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:hheproto.MyResponse)
}

inline void MyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.response_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.response_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MyResponse::~MyResponse() {
  // @@protoc_insertion_point(destructor:hheproto.MyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_.Destroy();
}

void MyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hheproto.MyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hheproto.MyResponse.response"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hheproto.MyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (!this->_internal_response().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hheproto.MyResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hheproto.MyResponse)
  return target;
}

size_t MyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hheproto.MyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (!this->_internal_response().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MyResponse::GetClassData() const { return &_class_data_; }


void MyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MyResponse*>(&to_msg);
  auto& from = static_cast<const MyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hheproto.MyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_response().empty()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MyResponse::CopyFrom(const MyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hheproto.MyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyResponse::IsInitialized() const {
  return true;
}

void MyResponse::InternalSwap(MyResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.response_, lhs_arena,
      &other->_impl_.response_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hhe_2eproto_getter, &descriptor_table_hhe_2eproto_once,
      file_level_metadata_hhe_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hheproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hheproto::CiphertextBytes*
Arena::CreateMaybeMessage< ::hheproto::CiphertextBytes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::CiphertextBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::Empty*
Arena::CreateMaybeMessage< ::hheproto::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::PublicKeyMsg*
Arena::CreateMaybeMessage< ::hheproto::PublicKeyMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::PublicKeyMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::PublicKeySetMsg*
Arena::CreateMaybeMessage< ::hheproto::PublicKeySetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::PublicKeySetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::CiphertextResult*
Arena::CreateMaybeMessage< ::hheproto::CiphertextResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::CiphertextResult >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::CiphertextMsg*
Arena::CreateMaybeMessage< ::hheproto::CiphertextMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::CiphertextMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::MLModelMsg*
Arena::CreateMaybeMessage< ::hheproto::MLModelMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::MLModelMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::EncSymmetricKeysMsg*
Arena::CreateMaybeMessage< ::hheproto::EncSymmetricKeysMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::EncSymmetricKeysMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::EncSymmetricDataMsg*
Arena::CreateMaybeMessage< ::hheproto::EncSymmetricDataMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::EncSymmetricDataMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::EncSymmetricDataRecord*
Arena::CreateMaybeMessage< ::hheproto::EncSymmetricDataRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::EncSymmetricDataRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::DataFile*
Arena::CreateMaybeMessage< ::hheproto::DataFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::DataFile >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::MyRequest*
Arena::CreateMaybeMessage< ::hheproto::MyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::MyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hheproto::MyResponse*
Arena::CreateMaybeMessage< ::hheproto::MyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hheproto::MyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
